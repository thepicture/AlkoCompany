<Application x:Class="AlkoCompanyNew.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:AlkoCompanyNew"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             StartupUri="Views/Windows/MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <!--PRIMARY-->
            <SolidColorBrush x:Key="PrimaryHueLightBrush"
                             Color="#FF5AC3FF" />
            <SolidColorBrush x:Key="PrimaryHueLightForegroundBrush"
                             Color="Purple" />
            <SolidColorBrush x:Key="PrimaryHueMidBrush"
                             Color="#FF8B1A1A" />
            <SolidColorBrush x:Key="PrimaryHueMidForegroundBrush"
                             Color="#FFCDCDCD" />
            <SolidColorBrush x:Key="PrimaryHueDarkBrush"
                             Color="Purple" />
            <SolidColorBrush x:Key="PrimaryHueDarkForegroundBrush"
                             Color="Purple" />
            <!--ACCENT-->
            <SolidColorBrush x:Key="SecondaryAccentBrush"
                             Color="#689f38" />
            <SolidColorBrush x:Key="SecondaryAccentForegroundBrush"
                             Color="#FFFFFF" />

            <ControlTemplate x:Key="RussianErrorTemplate">
                <ControlTemplate.Resources>
                    <DataTemplate DataType="{x:Type ValidationError}">
                        <TextBlock Foreground="{DynamicResource MaterialDesignValidationErrorBrush}"
                                   FontSize="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:ValidationAssist.FontSize)}"
                                   MaxWidth="{Binding ElementName=Placeholder, Path=ActualWidth}"
                                   HorizontalAlignment="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:ValidationAssist.HorizontalAlignment)}"
                                   Margin="2"
                                   TextWrapping="Wrap"
                                   Text="{Binding ErrorContent}"
                                   UseLayoutRounding="false" />
                    </DataTemplate>
                </ControlTemplate.Resources>
                <StackPanel>
                    <AdornedElementPlaceholder Name="Placeholder" />
                    <Border x:Name="DefaultErrorViewer"
                            Visibility="Collapsed"
                            Background="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:ValidationAssist.Background)}">
                        <TextBlock Foreground="{DynamicResource MaterialDesignValidationErrorBrush}"
                                   FontSize="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:ValidationAssist.FontSize)}"
                                   MaxWidth="{Binding ElementName=Placeholder, Path=ActualWidth}"
                                   HorizontalAlignment="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:ValidationAssist.HorizontalAlignment)}"
                                   Margin="0 2"
                                   TextWrapping="Wrap"
                                   Text="Значение некоррректно"
                                   UseLayoutRounding="false" />
                    </Border>
                    <materialDesign:PopupEx x:Name="ValidationPopup"
                                            IsOpen="False"
                                            Placement="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:ValidationAssist.PopupPlacement)}"
                                            PlacementTarget="{Binding ElementName=Placeholder, Mode=OneWay}"
                                            AllowsTransparency="True">
                        <Border x:Name="PopupBorder"
                                Background="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:ValidationAssist.Background)}">
                            <TextBlock Foreground="{DynamicResource MaterialDesignValidationErrorBrush}"
                                       FontSize="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:ValidationAssist.FontSize)}"
                                       HorizontalAlignment="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:ValidationAssist.HorizontalAlignment)}"
                                       Margin="0 2"
                                       TextWrapping="Wrap"
                                       Text="Значение некоррректно"
                                       UseLayoutRounding="false" />
                        </Border>
                    </materialDesign:PopupEx>
                </StackPanel>
                <ControlTemplate.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:ValidationAssist.OnlyShowOnFocus)}"
                                       Value="False" />
                            <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:ValidationAssist.UsePopup)}"
                                       Value="True" />
                            <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:ValidationAssist.Suppress)}"
                                       Value="False" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="ValidationPopup"
                                    Property="IsOpen"
                                    Value="True" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:ValidationAssist.OnlyShowOnFocus)}"
                                       Value="False" />
                            <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:ValidationAssist.UsePopup)}"
                                       Value="False" />
                            <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:ValidationAssist.Suppress)}"
                                       Value="False" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="DefaultErrorViewer"
                                    Property="Visibility"
                                    Value="Visible" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:ValidationAssist.OnlyShowOnFocus)}"
                                       Value="True" />
                            <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:ValidationAssist.UsePopup)}"
                                       Value="True" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="ValidationPopup"
                                    Property="IsOpen"
                                    Value="{Binding ElementName=Placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay}" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:ValidationAssist.OnlyShowOnFocus)}"
                                       Value="True" />
                            <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:ValidationAssist.UsePopup)}"
                                       Value="False" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="DefaultErrorViewer"
                                    Property="Visibility"
                                    Value="{Binding ElementName=Placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>

                    <DataTrigger Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:ValidationAssist.Background)}"
                                 Value="{x:Null}">
                        <Setter TargetName="PopupBorder"
                                Property="Background"
                                Value="{DynamicResource MaterialDesignPaper}" />
                        <Setter TargetName="DefaultErrorViewer"
                                Property="Background"
                                Value="{DynamicResource MaterialDesignPaper}" />
                    </DataTrigger>

                    <DataTrigger Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(materialDesign:TextFieldAssist.HasOutlinedTextField)}"
                                 Value="True">
                        <Setter TargetName="DefaultErrorViewer"
                                Property="Margin"
                                Value="0,2,0,0" />
                        <Setter TargetName="ValidationPopup"
                                Property="VerticalOffset"
                                Value="2" />
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </ResourceDictionary>
    </Application.Resources>
</Application>
